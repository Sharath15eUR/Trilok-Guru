#include <stdio.h>
#define MAX_SIZE 100
struct Queue {
    int front, rear;
    int elements[MAX_SIZE];
};
void initializeQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}
int isEmpty(struct Queue* q) {
    return q->front == -1;
}
void enqueue(struct Queue* q, int value) {
    if (q->rear == MAX_SIZE - 1) {
        printf("Queue is full. Cannot enqueue.\n");
    } else {
        if (isEmpty(q)) {
            q->front = 0;
        }
        q->rear++;
        q->elements[q->rear] = value;
    }
}
void sortQueue(struct Queue* q) {
    int i, j, temp, n;

    if (isEmpty(q)) {
        printf("Queue is empty. Nothing to sort.\n");
        return;
    }
    n = q->rear - q->front + 1;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (q->elements[q->front + j] > q->elements[q->front + j + 1]) {
                // Swap elements if they are in the wrong order
                temp = q->elements[q->front + j];
                q->elements[q->front + j] = q->elements[q->front + j + 1];
                q->elements[q->front + j + 1] = temp;
            }
        }
    }
}
void printQueue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty.\n");
    } else {
        printf("Queue elements: ");
        for (int i = q->front; i <= q->rear; i++) {
            printf("%d ", q->elements[i]);
        }
        printf("\n");
    }
}
int main() {
    struct Queue q;
    initializeQueue(&q);
    enqueue(&q, 5);
    enqueue(&q, 2);
    enqueue(&q, 7);
    enqueue(&q, 1);
    enqueue(&q, 8);
    printf("Original Queue:\n");
    printQueue(&q);
    sortQueue(&q);
    printf("Queue after sorting in ascending order:\n");
    printQueue(&q);
    return 0;
}
